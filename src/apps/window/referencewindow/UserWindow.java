package apps.window.referencewindow;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import util.commonUTIL;



import beans.Book;
import beans.LegalEntity;
import beans.StartUPData;
import beans.Users;

import dsServices.RemoteReferenceData;
import dsServices.ServerConnectionUtil;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Desai
 */
public class UserWindow extends javax.swing.JPanel {

    /**
     * Creates new form UserWindow
     */
	public static  ServerConnectionUtil de = null;
	RemoteReferenceData remoteBORef;
	public  DefaultTableModel model = null;
	 javax.swing.DefaultComboBoxModel counterPartyCom = new javax.swing.DefaultComboBoxModel();
	 Hashtable counterPartyID = new Hashtable();
	
    public UserWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    	de =ServerConnectionUtil.connect("localhost", 1099,commonUTIL.getServerIP());
      	 try {
      		 remoteBORef = (RemoteReferenceData) de.getRMIService("ReferenceData");
   			
   			//System.out.println(remoteBORef);
   		} catch (RemoteException e) {
   			// TODO Auto-generated catch block
   			e.printStackTrace();
   		}
    	
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        
        jTextField4 = new javax.swing.JComboBox();
        processDataCombo1(counterPartyCom,counterPartyID);

       // setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel1.setText("User Details");

        jLabel2.setText("User Name");

        jLabel3.setText("Password");

        jLabel4.setText("Group");
        
        Vector v1 =null;
        
		try {
			v1 = (Vector)	  remoteBORef.getStartUPData("UserGroup");
			
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		jComboBox1 = new JComboBox( convertVectortoSringArray(v1) );
		
		/*String s6=null;
		int i4=0;
		do{
			s6=(String) comboBox16.getItemAt(i4);
			choice3.addItem(s6);
			i4++;
		}while (comboBox16.getItemAt(i4)!=null);*/
        
        String col[] = {"ID","User Name",  "Group"};
        
        model = new DefaultTableModel(col,0);
          processTableData(model);
          jTable1.setModel(model);

        
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Save as new ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

    		@Override
    		public void mouseClicked(MouseEvent e) {
    			int i=jTable1.getSelectedRow();
    			jTextField1.setText((String)jTable1.getValueAt(i, 1));
    			jPasswordField1.setText((String)jTable1.getValueAt(i, 2));
    			String s= jTable1.getValueAt(i, 0).toString();
    			jComboBox1.setSelectedItem(s);
    		}

        });

        jButton2.setText("Edit");

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }

			private void jButton3ActionPerformed(ActionEvent evt) {
				// TODO Auto-generated method stub
				 int rowindex = jTable1.getSelectedRow(); 
		         
				 if ( rowindex > -1 ) {
					 
					 int userId	=	Integer.parseInt(model.getValueAt(rowindex, 0).toString());
		             					 
		             Users users = new Users();
		              
		             users.setId(userId);
		              
		             boolean isUserDeleted = false;
		              
		             try {
		            	 
		            	 isUserDeleted = remoteBORef.deleteUser(users);
		              
		             } catch (RemoteException e) {
		            	  // TODO Auto-generated catch block
		            	 e.printStackTrace();
		             }
		              
		             if ( isUserDeleted ) {
		            	  
		            	 JOptionPane.showMessageDialog(null,"User has been deleted",null,
		             			JOptionPane.INFORMATION_MESSAGE);
		            	  
		            	 model.removeRow(rowindex);
					     jTable1.repaint();
					       		              
		             } else{
		            	  
		            	 JOptionPane.showMessageDialog(null,"There was an error while deleting the selected User",null,
		           			JOptionPane.INFORMATION_MESSAGE);
		            	  
		             }
		              
					 
				 } else {
					 
					 JOptionPane.showMessageDialog(null,"Please select a User to delete",null,
			               		JOptionPane.INFORMATION_MESSAGE);
					 
				 }
				 
			}
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
             //   jButton3ActionPerformed(evt);
               int rowindex = jTable1.getSelectedRow(); 
				 if ( rowindex > -1 ) {
					 
					 int userId	=	Integer.parseInt(model.getValueAt(rowindex, 0).toString());
					  Users user = new Users();
		              
			             user.setId(userId);
			             user.setUser_name(jTextField1.getText());
			            	user.setPassword(jPasswordField1.getText());
			            	user.setUser_groups((String)jComboBox1.getSelectedItem());
			            	 try {
								remoteBORef.updateUser(user);
							} catch (RemoteException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
			             
				 }
            	
            }

			
        });

        jButton4.setText("Search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPasswordField1)
                            .addComponent(jComboBox1, 0, 125, Short.MAX_VALUE)
                            .addComponent(jTextField1)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(55, Short.MAX_VALUE))
        );

      //  pack();
    }// </editor-fold> 
    
    
    

		
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    	
    	if ( !(jTextField1.getText().equals("") || jTextField1.getText() == null ) ) {
    		
    		if ( !(jPasswordField1.getText().equals("") || jTextField1.getText() == null) ) {
    				
    			Users user = new Users();
            	//int i=jTable1.getRowCount();
            	
            	user.setId(0);
            	user.setUser_name(jTextField1.getText());
            	user.setPassword(jPasswordField1.getText());
            	user.setUser_groups((String)jComboBox1.getSelectedItem());
            	
            	boolean flag = true;
            	
            	try {
         		  
            		for(int i =0;i < jTable1.getRowCount();i++) {
            			
            			String username = (String) jTable1.getValueAt(i, 1);
            			String groupname = (String) jTable1.getValueAt(i, 2);
            			
            			/*System.out.print("usernameGet: " + username);
            			System.out.print(" groupnameget: " + groupname);
            			System.out.print(" usernameObj: " + user.getUser_name());
            			System.out.print(" groupnameObj: " +user.getUser_groups());*/
            			
            			if((username.equalsIgnoreCase(user.getUser_name()) 
            					&& (groupname.equalsIgnoreCase(user.getUser_groups())))) {
         				
            				flag = false;
            				break;
            			
            			}
         				    			  
            		}
            		
         		  if(!flag) {
         			 
         			  JOptionPane.showMessageDialog(null,"User name  "+ user.getUser_name() + " exists in group " + user.getUser_groups(),null,
               				JOptionPane.INFORMATION_MESSAGE);
         		  
         		  } else {
         		  
         			  int i = remoteBORef.saveUser(user);
         			  
         			  if(i == 0) {

         				  JOptionPane.showMessageDialog(null,"not saved ",null,
              				JOptionPane.INFORMATION_MESSAGE);
         			  } else {
         				  
         				  TableModel mo = jTable1.getModel();
              		//user.setBookno(remoteBORef.getMAXLEID());
              		//user.setId(remoteBORef.getMAXLEID());
              		
         				  model.insertRow(mo.getRowCount(), new Object[]{user.getId(),user.getUser_name(),user.getUser_groups()});
         				  repaint();
         			  }
         		  }
         		  
         	  } catch (RemoteException e) {
        			// TODO Auto-generated catch block
        			e.printStackTrace();
        		}
    			
    			
    		} else {
    			
    			JOptionPane.showMessageDialog(null,"Please Enter a Password",null,
                   		JOptionPane.INFORMATION_MESSAGE);
    			
    		}
    		
    		
    	} else {
    		
    		JOptionPane.showMessageDialog(null,"Please Enter a User Name",null,
               		JOptionPane.INFORMATION_MESSAGE);
    	}
    	
    	
 	  }
    //GEN-LAST:event_jButton1ActionPerformed
    
    
    private void processTableData(DefaultTableModel model) {
		// TODO Auto-generated method stub
    	Vector vector;
		try {
			vector = (Vector) remoteBORef.selectALLUsers();
			Iterator it = vector.iterator();
	    	int i =0;
    	while(it.hasNext()) {
    		
    		Users user = (Users) it.next();
    		
    		model.insertRow(i, new Object[]{user.getId(),user.getUser_name(),user.getUser_groups()});
    		
    		i++;
    	}
		}
    	catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    	
		
	}
    
    private String []  convertVectortoSringArray(Vector v) {
    	String name [] = null;
    	int i=0;
    	if(v != null ) {
    		name = new String[v.size()];
    		Iterator its = v.iterator();
    		while(its.hasNext()) {
    			name [i] = ( (StartUPData) its.next()).getName();
    			i++;
    		}
    	}
		return name;                                           
        // TODO add your handling code here:
    } 

    private void processDataCombo1( javax.swing.DefaultComboBoxModel combodata,Hashtable ids) {
    	Vector ledata;
		try {
			ledata = (Vector) remoteBORef.selectAllLs();
		
    	Iterator it = ledata.iterator();
    	int i =0;
    	while(it.hasNext()) {
    		
    		LegalEntity le = (LegalEntity) it.next();
    		
    			
    		combodata.insertElementAt(le.getName(), i);
    		ids.put(i, le.getId());
    		i++;
    	}	
		}catch (RemoteException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
    	
    	
    }
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserWindow().setVisible(true);
            }
        });
    }
    
    private int returnCounteryPartyID(int indexid,Hashtable h) {
    	return ((Integer) h.get(indexid)).intValue();
    	
   
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox jTextField4;
    // End of variables declaration                   
}
