 package apps.window.tradewindow;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.rmi.RemoteException;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;


import dsEventProcessor.TaskEventProcessor;
import dsManager.TaskManager;
import dsServices.RemoteAccount;
import dsServices.RemoteBOProcess;
import dsServices.RemoteProduct;
import dsServices.RemoteReferenceData;
import dsServices.RemoteTask;
import dsServices.RemoteTrade;
import dsServices.ServerConnectionUtil;

import apps.window.tradewindow.cashflowpanel.CashFlowPanel;
import apps.window.tradewindow.panelWindow.FeesPanel;
import apps.window.tradewindow.panelWindow.TaskPanel;
import apps.window.tradewindow.panelWindow.TransferPanel;
import apps.window.tradewindow.panelWindow.PostingPanel;

import apps.window.utilwindow.AuditTradeWindow;
import apps.window.utilwindow.JDialogTable;
import apps.window.utilwindow.utilPanelSaveUpdate;
import beans.Audit;
import beans.Task;
import beans.Trade;
import beans.Users;
import bo.transfer.rule.ProductTransferRule;
import util.*;

public class JFrameTradeWindowApplication extends javax.swing.JFrame {

    /** Creates new form NewJFrame1 */
	Hashtable<String, ProductTransferRule> rulehandlers = new Hashtable();
	TradePanel tradeP = null;
	RemoteTrade remoteTrade ;
	RemoteBOProcess boremote;
	RemoteTask remoteTask;
	RemoteReferenceData remoteReference;
	RemoteAccount remoteAccount ;
	ProductTransferRule transferRule = null;
	public static  ServerConnectionUtil de = null;
	CommonPanel productWindowpanel = null;
	Trade trade = new Trade();
    String panelName = "";
    TransferPanel		transferPanel;
    PostingPanel		postingPanel;
    TaskPanel taskPanel;
    apps.window.tradewindow.panelWindow.SDIPanel  sdiPanel;
    FeesPanel feesPanel;
    Users userName  =null;
    JTabbedPane jTabbedPane12 = new javax.swing.JTabbedPane();
    JMenu cashFlow = null;
    final  utilPanelSaveUpdate bottomPanel = new utilPanelSaveUpdate();
    String productTypeName = "";
    TaskManager taskManager = null;
    RemoteProduct remoteProduct;
    Users forTaskUser = null;
    int tradeId = 0;
    Trade tradeW = null;
public String getProductTypeName() {
		return productTypeName;
	}
	public void setProductTypeName(String productTypeName) {
	
		this.productTypeName = productTypeName;
	}


			JPanel		SettlementPanel;
    public JFrameTradeWindowApplication(String name,int tradeId,Users user) {
    	JFrameTradeWindowApplication task =  new	JFrameTradeWindowApplication(name,user);
    	
        this.tradeId = tradeId;
    }
    public JFrameTradeWindowApplication(String name,Users user) {
    	taskManager = new TaskManager("localhost",commonUTIL.getLocalHostName(),"TaskManager   "+user.getUser_name());
		 taskManager.start(taskManager);
		 
			initComponents(name,user);
			//taskManager.setTradWIndow(this);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(String name,Users user) {
    	setProductTypeName(name);
    	userName = user;
    	forTaskUser = user;
    	de =ServerConnectionUtil.connect("localhost", 1099,commonUTIL.getLocalHostName() );
	   	 try {
	   		remoteTrade = (RemoteTrade) de.getRMIService("Trade");
	   		boremote = (RemoteBOProcess) de.getRMIService("BOProcess");
	   		remoteTask = (RemoteTask) de.getRMIService("Task");
	   		remoteReference = (RemoteReferenceData) de.getRMIService("ReferenceData");
	   		remoteAccount = (RemoteAccount) de.getRMIService("Account");
	   		remoteProduct = (RemoteProduct) de.getRMIService("Product");
			//	System.out.println(remoteTrade);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	setTitle(name);
    	panelName = name;
        jTabbedPane1 = new javax.swing.JTabbedPane();
        
        jPanel1 = new javax.swing.JPanel();
       
       
        tradeP =  makeTradePanel(name);
        tradeP.setUser(userName);
        productWindowpanel = makeProductPanel(name);//new javax.swing.JPanel();
        transferRule = 	getTransferRuleHandler(name);
        transferRule.setRefDate(remoteReference);
        transferRule.setRemoteBOProcess(boremote);
        transferRule.setRemoteTrade(remoteTrade);
        transferRule.setRemoteProduct(remoteProduct);
		
        transferPanel = (apps.window.tradewindow.panelWindow.TransferPanel) makeBOOperationPanel("Transfer");
        transferPanel.setRemoteProduct(remoteProduct);
        transferPanel.setRemoteBO(boremote);
        transferPanel.setRefData(remoteReference);
        transferPanel.setUser(userName);
        postingPanel =(apps.window.tradewindow.panelWindow.PostingPanel) makeBOOperationPanel("Posting");
        postingPanel.setRemoteAccount(remoteAccount);
        postingPanel.setRemoteRef(remoteReference);
       taskPanel = (TaskPanel)  makeBOOperationPanel("Task");
        sdiPanel = (apps.window.tradewindow.panelWindow.SDIPanel) makeBOOperationPanel("SDI");
        feesPanel = (FeesPanel) makeBOOperationPanel("Fees");
        sdiPanel.setRule(transferRule);
        setTitle("Trade Window " + getUserName());
        tradeP.setSDIPanel(sdiPanel);
        tradeP.setTaskPanel(taskPanel);
        tradeP.setTradeTransfers(transferPanel);
        tradeP.setFEESPanel(feesPanel);
        tradeP.setTradePostings(postingPanel);
 
       
        JMenuBar menuBar = new JMenuBar();
        
        // Add the menubar to the frame
        setJMenuBar(menuBar);
        if(productWindowpanel != null) {
	        productWindowpanel.setPanelValue(tradeP);        
	        jTabbedPane12.add(productWindowpanel);
	       final   CashFlowPanel cashFlowp = makeCashFlowPanel(name);
	        jTabbedPane12.add("CashFlow",cashFlowp);
	        jTabbedPane12.setTitleAt(1, "<HTML> C<BR>A<BR>S<BR>H<BR> <BR> <BR>F<BR>L<BR>O<BR>W<BR>");
	        jTabbedPane12.setTabPlacement(JTabbedPane.LEFT);
	        tradeP.setPanelValue(productWindowpanel);      
	        // productWindowpanel.add(jTabbedPane12);
        
        
       
        
     // Creates a menubar for a JFrame
       
        
        jTabbedPane12.addMouseListener(new java.awt.event.MouseAdapter() {

			@Override
			public void mouseClicked(MouseEvent arg0) {
				// TODO Auto-generated method stub
				Vector cashFlows = (Vector) productWindowpanel.getCashFlows();
				if(cashFlows != null) {
				cashFlowp.setCashFlows(cashFlows); 
				}
			}

			
        });
        
        } else {
        	jTabbedPane12.setVisible(false);
			bottomPanel.setVisible(false);
			  add(jTabbedPane1);
			  setSize(900,600);
        }
        // Define and add two drop down menu to the menubar
        JMenu fileMenu = new JMenu("File");
        cashFlow = new JMenu("CashFlow");
        cashFlow.setEnabled(false);
        menuBar.add(fileMenu);
        menuBar.add(cashFlow);
        jPanel6 = new JPanel();
        jPanel3 = new JPanel();
        // Create and add simple menu item to one of the drop down menu
        JMenuItem newAction = new JMenuItem("New");
        JMenuItem saveAction = new JMenuItem("Save");
        JMenuItem saveAsNewAction = new JMenuItem("Save as New");
        JMenuItem deleteAction = new JMenuItem("Delete");
        JMenuItem auditAsNewAction = new JMenuItem("Monitor");
        
        JMenuItem cutAction = new JMenuItem(".....");
        JMenuItem exitAction = new JMenuItem("Exit");
        JMenuItem opemAction = new JMenuItem("Open ");
       
        fileMenu.add(newAction);
        fileMenu.add(saveAction);
        fileMenu.addSeparator();
        fileMenu.add(opemAction);
        fileMenu.add(saveAsNewAction);
        fileMenu.add(auditAsNewAction);
        fileMenu.add(deleteAction);
        fileMenu.add(exitAction);
        cashFlow.add(cutAction);
            
      final  utilPanelSaveUpdate bottomPanel = new utilPanelSaveUpdate();
        bottomPanel.setTradePanel(tradeP);
        bottomPanel.setProductWindowpanel(productWindowpanel);
        bottomPanel.setRemoteRerenceData(remoteReference);
        bottomPanel.setRemoteTrade(remoteTrade);
        
  
        
      
        
        jTabbedPane1.addTab("Trade", tradeP);
     //   taskManager.setTradWIndow(this);
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {

			@Override
			public void mouseClicked(MouseEvent e) {
				if(jTabbedPane1.getSelectedIndex() > 0) {
					jTabbedPane12.setVisible(false);
					bottomPanel.setVisible(false);
				}
				if(jTabbedPane1.getSelectedIndex() == 0) {
					jTabbedPane12.setVisible(true);
					bottomPanel.setVisible(true);
				}
					
				
			}
				
			
			
    
    	
    });
      //  jTabbedPane1.add(productWindowpanel);
        if(productWindowpanel != null) {
        	
        	 javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
             jPanel3.setLayout(jPanel3Layout);
             jPanel3Layout.setHorizontalGroup(
                 jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                 .addGroup(jPanel3Layout.createSequentialGroup()
                     .addContainerGap()
                     .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                         .addComponent(tradeP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                         .addComponent(bottomPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addComponent(jTabbedPane12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addContainerGap())
             );
             jPanel3Layout.setVerticalGroup(
                 jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                 .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                     .addContainerGap()
                     .addComponent(tradeP, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(jTabbedPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addGap(81, 81, 81))
             );

        	jTabbedPane1.addTab("Trade ", jPanel3);

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 951, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                    .addContainerGap())
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );

        pack();
        
        }

  //      jTabbedPane1.addTab("Trade Data", jPanel1);
        jTabbedPane1.addTab("SDI", sdiPanel);
        jTabbedPane1.addTab("Task Data", taskPanel);
        jTabbedPane1.addTab("Transfer Data", transferPanel);
        jTabbedPane1.addTab("Posting", postingPanel);
        jTabbedPane1.addTab("Fees ", feesPanel);
        
      
        auditAsNewAction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
            	if(tradeP.getTrade() == null) {
            		JOptionPane.showMessageDialog(null,"Select Trade " ,null,
               				JOptionPane.INFORMATION_MESSAGE);
            		return;
            	}
            			
            	setTradeId(tradeP.getTrade().getId());
            	 String s [] = {"id","Chanage Date","Change Field","Type","Trade Version","Column Values","Trade Attributes","User","Group"};
             	DefaultTableModel tablemodel = new DefaultTableModel(s,0);
             	processTableData(tablemodel);
             	AuditTradeWindow showAudit= new AuditTradeWindow(tablemodel);
               showAudit.setTitle("Trade Audit Window");
               
               showAudit.setSize(700, 400);
               showAudit.setFocusable(false);
               showAudit.setVisible(true);
               
            }
            });
        saveAsNewAction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
            	System.out.println("Call to menu saveASNEW " + trade);
            	trade = new Trade();
            	 
            	 tradeP.buildTrade(trade,"SAVEASNEW");
            	 if(productWindowpanel != null) {
        			 productWindowpanel.buildTrade(trade,"SAVEASNEW");
        		 }
            	 if(trade.getTradedesc1() != null && trade.getTradedesc1().trim().length() > 0)  {
            		 
            		 trade.setUserID(userName.getId());
            		
             
            		 try {
               	         
			               	 trade.setId(0);
			               	 trade.setStatus("NONE");
			               	 trade.setAction("NEW");
			               	feesPanel.refreshFees();
			             
			              // trade.setFees(feesPanel.getFeesDataV());
			               	 int i= 	remoteTrade.saveTrade(trade);
			               	 tradeId = i;
			               	 if(i == -4) {
			         			commonUTIL.showAlertMessage("Trade is Lock by another User ");
			            			return;
			            		 }
			               	 if(i > 0) 
			               		 JOptionPane.showMessageDialog(null,"Trade Saved with  "+ i ,null,
			               				 JOptionPane.INFORMATION_MESSAGE);
			               	 //System.out.println("*************** " +i);
			               	 trade = (Trade) remoteTrade.selectTrade(i);
			               	tradeW = trade;
			               	 tradeP.saveASNew(trade);
			                // taskManager.setTradWIndow(tradeP);
            		 } catch (RemoteException e) {
            			 // TODO Auto-generated catch block
            			 e.printStackTrace();
            		 } 
                 
               
            	 }
            }
        });
        
        
        
        bottomPanel.SAVE.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                tradeP.buildTrade(trade,"SAVE");
                if(tradeP.getAction() == null) {
            		commonUTIL.showAlertMessage("Select Action");
            		return;
            	}
                  trade.setUserID(userName.getId());
                  if(productWindowpanel != null) {
                  productWindowpanel.buildTrade(trade,"SAVE");
                  }
              
                 try {
                 	 trade.setFees(feesPanel.getFeesDataV());
       		 int i= 	remoteTrade.saveTrade(trade);
       		 if(i == -4) {
        			commonUTIL.showAlertMessage("Trade is Lock by another User ");
           			return;
           		 }
       		 if(i == -3) {
       			commonUTIL.showAlertMessage("Amend not allowed on Cancel Trade");
       			return;
       		 }
       		 if(i > 0) 
       			commonUTIL.showAlertMessage("Trade Updated");
       			 
       			//System.out.println("*************** " +i);
       		trade = (Trade) remoteTrade.selectTrade(i);
       		tradeW = trade;
       		tradeId = i;
  			tradeP.saveASNew(trade);
  		//  taskManager.setTradWIndow(tradeP);
       		} catch (RemoteException e) {
       			// TODO Auto-generated catch block
       			e.printStackTrace();
       		} 
                  
                  
               }
           });
        
        
        bottomPanel.SAVEASNEW.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                tradeP.buildTrade(trade,"SAVEASNEW");
                  trade.setUserID(userName.getId());
                  if(productWindowpanel != null) { 
                	 
                         productWindowpanel.buildTrade(trade,"SAVEASNEW");
                         if(trade.getProductId() == 0) {
                		  
                		  return;
                	  }
                  }
              
                 try {
                	 trade.setId(0);
                	 tradeId = 0;
                	 tradeW = null;
                	 trade.setStatus("NONE");
                	 trade.setAction("NEW");
                	 feesPanel.refreshFees();
       		 int i= 	remoteTrade.saveTrade(trade);
       		 if(i == -4) {
     			commonUTIL.showAlertMessage("Trade is Lock by another User ");
        			return;
        		 }
       		 tradeId = i;
       		if(i > 0) 
   			 JOptionPane.showMessageDialog(null,"Trade Saved with  "+ i ,null,
           				JOptionPane.INFORMATION_MESSAGE);
       			//System.out.println("*************** " +i);
       		trade = (Trade) remoteTrade.selectTrade(i);
       		tradeW = trade;
  			tradeP.saveASNew(trade);
  	//	  taskManager.setTradWIndow(tradeP);
       		} catch (RemoteException e) {
       			// TODO Auto-generated catch block
       			e.printStackTrace();
       		} 
                  
                  
               }
           });
        
        bottomPanel.NEW.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
            	trade.setId(0);
            	tradeId = 0;
                tradeP.buildTrade(trade,arg0.getActionCommand());
                if(productWindowpanel != null) { 
                 productWindowpanel.buildTrade(trade,"NEW");
                }
                 
                // editMenu.setEnabled(false);
      			getTradeTransfers(transferPanel);
      		    getTradePostings(postingPanel);
      			getTradeTask(taskPanel);
      			feesPanel.refreshFees();
            }

			
        });
     
            
        newAction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
            	trade.setId(0);
            	tradeId = 0;
              tradeP.buildTrade(trade,arg0.getActionCommand());
              if(productWindowpanel != null) { 
               productWindowpanel.buildTrade(trade,"NEW"); 
              }
             
              // editMenu.setEnabled(false);
    			getTradeTransfers(transferPanel);
    			 getTradePostings(postingPanel);
    			getTradeTask(taskPanel);
    			feesPanel.refreshFees();
               
            }
        });
        
        deleteAction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
            int tradeID = 0;
              if(tradeP.getTrade() != null && tradeP.getTrade().getId() > 0) {
            	  tradeID = tradeP.getTrade().getId();
            	  Trade trade = new Trade();
            	  tradeP.buildTrade(trade,"SAVE");
                  trade.setUserID(userName.getId());
                  if(productWindowpanel != null) {
                  productWindowpanel.buildTrade(trade,"SAVE");
                  }
                  trade.setVersionID(-1);
            	  trade.setId(tradeID);
            	  try {
					remoteTrade.removeTrade(trade);
					
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
              }
              
              trade.setId(0);
              tradeP.buildTrade(trade,"NEW");
              if(productWindowpanel != null) { 
               productWindowpanel.buildTrade(trade,"NEW");
              }
             
              // editMenu.setEnabled(false);
    			getTradeTransfers(transferPanel);
    			getTradeTask(taskPanel);
    			 getTradePostings(postingPanel);
    			 JOptionPane.showMessageDialog(null,"Trade " + tradeID + " Deleted" ,null,
	          				JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        saveAction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
            	if(tradeP.getAction() == null) {
            		JOptionPane.showMessageDialog(null,"Select Action" ,null,
              				JOptionPane.INFORMATION_MESSAGE);
            		return;
            	}
            	tradeP.buildTrade(trade,"SAVE");
                trade.setUserID(userName.getId());
                if(productWindowpanel != null) { 
                productWindowpanel.buildTrade(trade,"SAVE");
                }
            
               try {
            	 	 trade.setFees(feesPanel.getFeesDataV());
     		 int i= 	remoteTrade.saveTrade(trade);
     		 tradeId = i;
     		 if(i == -4) {
     			commonUTIL.showAlertMessage("Trade is Lock by another User ");
        			return;
        		 }
     		 if(i == -3) {
        			commonUTIL.showAlertMessage("Amend not allowed on Cancel Trade");
        			return;
        		 }
     		 if(i > 0) 
  			 JOptionPane.showMessageDialog(null,"Trade Updated" ,null,
          				JOptionPane.INFORMATION_MESSAGE);
     			 
     			//System.out.println("*************** " +i);
     		trade = (Trade) remoteTrade.selectTrade(i);
     		tradeW = trade;
  			tradeP.saveASNew(trade);
     		} catch (RemoteException e) {
     			// TODO Auto-generated catch block
     			e.printStackTrace();
     		} 
                
    		  
               
            }
        });

        String s [] = {"Tradeid","ProductName"};
    	DefaultTableModel tablemodel = new DefaultTableModel(s,0) {
    		 @Override
    		    public boolean isCellEditable(int row, int column) {
    		       //all cells false
    		       return false;
    		    }

    	};
    	processTableDataOpen(tablemodel,getProductTypeName());
      final  JDialogTable showAllTrades = new JDialogTable(tablemodel);
      showAllTrades.setLocationRelativeTo(this);
      opemAction.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent arg0) {
        	  String s [] = {"Tradeid","ProductName"};
        	  showAllTrades.jTable1.removeAll();
          	DefaultTableModel tablemodel = new DefaultTableModel(s,0);
          	processTableDataOpen(tablemodel,getProductTypeName());
          	showAllTrades.jTable1.setModel(tablemodel);
        	  showAllTrades.setVisible(true);
        	 
             
          }
      });
      showAllTrades.jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

			@Override
			public void mouseClicked(MouseEvent e) {
				String tradeid = showAllTrades.jTable1.getValueAt(showAllTrades.jTable1.getSelectedRow(),0).toString();
				int id  =new  Integer(tradeid).intValue();
				try {
					
						 trade = (Trade) remoteTrade.selectTrade(id);
						 tradeId = trade.getId();
						 tradeW = trade; // used when task for same trade is publish
						 openTrade(trade);
						showAllTrades.dispose();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				}
				
			
			
    
    	
    });
        pack();
    }// </editor-fold>
    
    
    public void openTrade(Trade trade) {
    	tradeP.openTrade(trade);
		 if(productWindowpanel != null) {  
		productWindowpanel.openTrade(trade);
	 	 feesPanel.setTrade(trade);
		 }
		//if(e.getClickCount() == 2) 
		 getTradeTask(taskPanel);
		 getTradeTransfers(transferPanel);
		 getTradePostings(postingPanel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameTradeWindowApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameTradeWindowApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameTradeWindowApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameTradeWindowApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
               // new JFrameTradeWindowApplication("Bond").setVisible(true);
            }
        });
    }
    
    protected CommonPanel makeProductPanel(String name) {
        String productWindowName = "apps.window.tradewindow."  + name.toUpperCase() + "Panel";
        CommonPanel panel = null;
        
        try {
        Class class1 =    ClassInstantiateUtil.getClass(productWindowName,true);
        panel =  (CommonPanel) class1.newInstance();
           //  productWindow = (BondPanel) 
        } catch (Exception e) {
            System.out.println( e);
        }

        return panel;
    }
    
    protected TradePanel makeTradePanel(String name) {
        String productWindowName = "apps.window.tradewindow."  + name.toUpperCase() + "TradePanel";
        TradePanel panel = null;
        
        try {
        Class class1 =    ClassInstantiateUtil.getClass(productWindowName,true);
        panel =  (TradePanel) class1.newInstance();
           //  productWindow = (BondPanel) 
        } catch (Exception e) {
            System.out.println( e);
        }

        return panel;
    }
    
	protected BackOfficePanel makeBOOperationPanel(String name) {
        String productWindowName = "apps.window.tradewindow.panelWindow."  + name + "Panel";
        BackOfficePanel panel = null;
        
        try {
        Class class1 =    ClassInstantiateUtil.getClass(productWindowName,true);
        panel =  (BackOfficePanel) class1.newInstance();
           //  productWindow = (BondPanel) 
        } catch (Exception e) {
            System.out.println( e);
        }

        return panel;
    }
	protected CashFlowPanel makeCashFlowPanel(String name) {
        String productWindowName = "apps.window.tradewindow.cashflowpanel."  + name.toUpperCase() + "CashFlowPanel";
        CashFlowPanel panel = null;
        
        try {
        Class class1 =    ClassInstantiateUtil.getClass(productWindowName,true);
        panel =  (CashFlowPanel) class1.newInstance();
           //  productWindow = (BondPanel) 
        } catch (Exception e) {
            System.out.println( e);
        }

        return panel;
    }
	
	public int getTradeId() {
		return tradeId;
	}
	public void setTradeId(int tradeId) {
		this.tradeId = tradeId;
	}
	public void setOpenTrade(Trade newTrade) {
		
		tradeP.openTrade(newTrade);
		  if(productWindowpanel != null) {
		productWindowpanel.openTrade(newTrade);
		  }
		trade = newTrade;
		getTradeTask(taskPanel);
		transferPanel.setTrade(trade);
		getTradeTransfers(transferPanel);
		getTradePostings(postingPanel);
		// TODO Auto-generated method stub
		
	}
	public void getTradeTransfers(BackOfficePanel panel) {
		try {
			panel.setTrade(trade);
			panel.fillJTabel((Vector)boremote.queryWhere("Transfer", "tradeId = " + trade.getId()));
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void getTradePostings(PostingPanel postingPanel) {
		// TODO Auto-generated method stub
		try {
			postingPanel.fillJTabel((Vector)remoteAccount.getPostingonWhereClause("tradeid = "+trade.getId()));
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	public void getTradeTask(BackOfficePanel panel) {
		try {
			//System.out.println(trade);
		Vector data = (Vector) remoteTask.selectTaskWhere("tradeId = " + trade.getId());
			panel.fillJTabel((data));
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public void getTradeFees(BackOfficePanel panel) {
		
	    panel.setTrade(trade);
		
	}
    // Variables declaration - do not modify
    
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    
    private javax.swing.JTabbedPane jTabbedPane1;
   
    // End of variables declaration
	public Users getUserName() {
		return userName;
	}
	public void setUserName(Users userName) {
		this.userName = userName;
		tradeP.setUser(userName);
	}
	private void processTableData(DefaultTableModel model) {
		// TODO Auto-generated method stub
    	Vector vector;
		try {
			vector = (Vector) remoteTrade.getAuditedTrade(getTradeId());
			Iterator it = vector.iterator();
	    	int i =0;
	    	while(it.hasNext()) {
	    		
	    		Audit audit = (Audit) it.next();
	    		Users user = (Users) remoteReference.selectUser(audit.getUserid());
	    		model.insertRow(i, new Object[]{audit.getTradeid(),audit.getChangeDate(),audit.getFieldname(),audit.getType(),audit.getVersion(),audit.getTattribue(),user.getUser_name(),user.getUser_groups()});
	    		i++;
	    		}
	    		
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
	
	private void disableCashFlowMenu() {
		
	}
	
	private void processTableDataOpen(DefaultTableModel model,String name) {
		// TODO Auto-generated method stub
    	Vector vector;
		try {
			
			
			vector = (Vector) remoteTrade.selectforOpen(name.trim());
			Iterator it = vector.iterator();
	    	int i =0;
	    	while(it.hasNext()) {
	    		
	    		Trade trade = (Trade) it.next();
	    	
	    		model.insertRow(i, new Object[]{trade.getId(),trade.getTradedesc()});
	    		i++;
	    		}
	    		
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
	
	private ProductTransferRule getTransferRuleHandler(String name) {
        String productTransfer = "bo.transfer.rule.Generate"  + name.toUpperCase() + "TransferRule";
        ProductTransferRule transferRuleHandler = null;
        
        try {
        	transferRuleHandler = (ProductTransferRule) rulehandlers.get(name);
        	if(transferRuleHandler == null) {
        Class class1 =    ClassInstantiateUtil.getClass(productTransfer,true);
        transferRuleHandler =  (ProductTransferRule) class1.newInstance();
        rulehandlers.put(name, transferRuleHandler);
        }
           //  productWindow = (BondPanel) 
        } catch (Exception e) {
        	commonUTIL.displayError("JFrameTradeApplication  ", "getTransferRuleHandler <<<<< not able to create Handler ", e);
        }

        return transferRuleHandler;
    }
	public  synchronized void processTasks(TaskEventProcessor taskEvent) {
		System.out.println(getTitle() + "  " +  tradeId + " version   " + tradeP.getTrade().getId()+ " version   " + tradeP.getTrade().getVersion());
		String userid = getTitle().substring(getTitle().indexOf(":")+1,getTitle().length());
		int uid  = new Integer(userid).intValue();
		if((taskEvent.getUserID() != uid) && (taskEvent.getTradeID() == tradeP.getTrade().getId()))  {
			commonUTIL.showAlertMessage("Trade amended by another user ");
			openTrade(taskEvent.getTrade());
		}
	  //  tradeP.processTask(taskEvent,forTaskUser);
	}
		
		// TODO Auto-generated method stub
		
	
}

