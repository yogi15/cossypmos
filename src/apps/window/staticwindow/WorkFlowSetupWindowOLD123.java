package apps.window.staticwindow;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.rmi.RemoteException;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;

import util.commonUTIL;
import beans.Fees;
import beans.Folder;
import beans.LegalEntity;
import beans.StartUPData;
import beans.Transfer;
import beans.Users;
import beans.WFConfig;

import dsServices.RemoteReferenceData;
import dsServices.ServerConnectionUtil;
public class WorkFlowSetupWindowOLD123  extends javax.swing.JPanel {

    /** Creates new form NewJFrame5 */
	 DefaultMutableTreeNode root;
	 DefaultMutableTreeNode parent, leaf;
	  public static DefaultMutableTreeNode nNode;
	  Vector copyData = new Vector();
	  Hashtable copyD = new Hashtable();
	    public static MutableTreeNode mNode;
	   Hashtable selectTransitions = new Hashtable<String, Vector>();
	    DefaultTreeModel       _treeModel;
	    DefaultMutableTreeNode _root;
	    DefaultMutableTreeNode _productName  = null;
	    DefaultMutableTreeNode _productSubName = null;
	    public static  ServerConnectionUtil de = null;
	 //   DefaultTableModel tmodel;
		 RemoteReferenceData remoteBORef;
		 TableModelUtil model;
		 String col[] = {"Id","Current status", "Action ", "New Status","Group","Auto","Rules","Type"};
		 String type = ""; 
		 Vector data = null;
    public WorkFlowSetupWindowOLD123() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	 de =ServerConnectionUtil.connect("localhost", 1099,commonUTIL.getServerIP());
	   	 try {
	   		 remoteBORef = (RemoteReferenceData) de.getRMIService("ReferenceData");
				
				System.out.println(remoteBORef);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

     //   setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTree1);

        jLabel1.setText("Current Status");

        jLabel1.setText("Org Status");
        DefaultComboBoxModel  orgStatus = new javax.swing.DefaultComboBoxModel();
	     
	      getDataOnComboBox(orgStatus, "Status");
	      
        jComboBox1.setModel(orgStatus);  // for original status
    
        jLabel2.setText("Action");

    
        DefaultComboBoxModel  action = new javax.swing.DefaultComboBoxModel();
	     
        getDataOnComboBox(action, "Action");
          jComboBox2.setModel(action); // for actions

          jLabel3.setText("Resulting Status");
          DefaultComboBoxModel  newStatus = new javax.swing.DefaultComboBoxModel();
  	     
  	      getDataOnComboBox(newStatus, "Status");
          jComboBox3.setModel(newStatus); // to new status

        jCheckBox1.setText("AUTO");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("RULE");

        jTextField1.setText("jTextField1");

        jButton1.setText(".....");

        jLabel5.setText("GROUP");
        DefaultComboBoxModel  groups = new javax.swing.DefaultComboBoxModel();
        DefaultComboBoxModel  types = new javax.swing.DefaultComboBoxModel();
        getDataOnComboBox(groups, "UserGroup");
        getDataOnComboBox(types,"WFType");
        jComboBox4.setModel(groups);
        jComboBox5.setModel(types);

      buildTree();
      
      jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
    	 	JPopupMenu popupMenu = new JPopupMenu();
			@Override
			public void mouseClicked(MouseEvent e) {
				popupMenu.removeAll();
				 JMenuItem menuCopy = new JMenuItem("COPY");
			      menuCopy.addActionListener(new ActionListener() {
				        public void actionPerformed(ActionEvent arg0) {
				        	 String action = arg0.getActionCommand().toString();
				        	
				        	 String sql = " productType = '" + _productName.toString() + "' and productSubType = '" + _productSubName.toString() + "' and type ='"+type+"'";
								Vector selectData = (Vector) selectTransitions.get(sql);
								if(selectData != null && (!selectData.isEmpty())) {
								  copyData = selectData;
								  copyD.put("COPY", copyData);
								}
				        	 
				        }
			});	
			      JMenuItem menuPaste = new JMenuItem("PASTE");
			      menuPaste.addActionListener(new ActionListener() {
				        public void actionPerformed(ActionEvent arg0) {
				        	 String _prodType =_productName.toString();
				        	 String _prodSubType = _productSubName.toString();
				        	 String _pType = type;
				        	 String sql = " productType = '" + _prodType + "' and productSubType = '" +_prodSubType + "' and type ='"+_pType+"'";
				        	 Vector dataCopied = (Vector) copyD.get("COPY");
				        	 Vector<WFConfig> datatoCopied = new Vector<WFConfig>();
				        	 for(int i=0;i<dataCopied.size();i++) {
				        		 WFConfig wf = (WFConfig) dataCopied.get(i);
				        		 wf.setId(0);
				        		 wf.setProductSubType(_prodSubType);
				        		 wf.setProductType(_prodType);
				        		 wf.setType(_pType);
				        		 datatoCopied.addElement(wf);
				        	 }
				        	 
				        	 fillnewData(datatoCopied);
				        	 selectTransitions.put(sql, datatoCopied);
				        	 copyD.clear();
				        }

						private void fillnewData(Vector<WFConfig> datatoCopied) {
							// TODO Auto-generated method stub
							int id = 0;
							Vector<WFConfig> toshowTable = new Vector<WFConfig>();
							if(!datatoCopied.isEmpty())
								for(int i=0;i<datatoCopied.size();i++) {
							      try {
							    	  WFConfig wf = datatoCopied.get(i);
									id = remoteBORef.saveWF(wf);
									wf.setId(id);
									toshowTable.addElement(wf);
								} catch (RemoteException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								}
							model.removeALL();
							 data = toshowTable;
							 model = new TableModelUtil(toshowTable, col, remoteBORef);
							 jTable1.setModel(model);
							 popupMenu.removeAll();
						}
			});	  
			      
				if(SwingUtilities.isRightMouseButton(e) == true) 					{
					
					Vector copyData =  (Vector) copyD.get("COPY");
					if(copyData == null) { 
						String sql = " productType = '" + _productName.toString() + "' and productSubType = '" + _productSubName.toString() + "' and type ='"+type+"'";
						Vector selectData = (Vector) selectTransitions.get(sql);
						if(selectData != null && (!selectData.isEmpty())) {
						popupMenu.removeAll();
						popupMenu.add(menuCopy);
					  popupMenu.show(e.getComponent(), e.getX(), e.getY());	
						}
					}
					if(copyData != null) { 
						 String sql = " productType = '" + _productName.toString() + "' and productSubType = '" + _productSubName.toString() + "' and type ='"+type+"'";
							Vector selectData = (Vector) selectTransitions.get(sql);
							if(selectData != null && (!selectData.isEmpty())) {
							  copyData = selectData;
							  copyD.put("COPY", copyData);
							  popupMenu.removeAll();
								popupMenu.add(menuCopy);
							   popupMenu.show(e.getComponent(), e.getX(), e.getY());
							}else {
						popupMenu.removeAll();
						popupMenu.add(menuPaste);
					   popupMenu.show(e.getComponent(), e.getX(), e.getY());	
							}
					}
				}
			
		}
	});
      jTree1.addTreeSelectionListener(new TreeSelectionListener() {
    	
    		
			@Override
			public void valueChanged(TreeSelectionEvent e){
				// TODO Auto-generated method stub
			
			
			    TreePath selPath = e.getNewLeadSelectionPath();
			 //  System.out.println( selPath.getPathCount());
			    if (selPath == null) return;
			    String productType  = "";
			    String productSubType = "";
			    
			 
			    if (selPath.getPathCount() > 2) {
			    	type =  ((DefaultMutableTreeNode)selPath.getPathComponent(1)).toString();
			    	_productName =
			        (DefaultMutableTreeNode)selPath.getPathComponent(2);
			        productType = _productName.toString();
			        if (selPath.getPathCount() > 3) {
			        	_productSubName =
			            (DefaultMutableTreeNode)selPath.getPathComponent(3);
			        	if(_productSubName == null)
			        		return;
			        productSubType = _productSubName.toString();
			        }
			    }
			    
				
				System.out.println(productType + "  " + productSubType);
				  jTable1.removeAll();
				  String col[] = {"Id","Current status", "Action ", "New Status","Group","Auto","Rules","Type"};
			    //    tmodel = new DefaultTableModel (col,0);
				selectProductWF(productType,productSubType,type);
			//	jTable1.setModel(tmodel);
			
      	
      	
      	
			   }});
      
      
      jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

  		@Override
  		public void mouseClicked(MouseEvent e) {
  			int i=jTable1.getSelectedRow();
  			if(i >= 0 ) {
  			
  			
  		
  			jComboBox1.setSelectedItem(jTable1.getValueAt(i, 1).toString()); // for org status combox
  			jComboBox2.setSelectedItem(jTable1.getValueAt(i, 2).toString()); // for action combox
  			jComboBox3.setSelectedItem(jTable1.getValueAt(i, 3).toString()); // for newStatus combox
  			jComboBox4.setSelectedItem(jTable1.getValueAt(i, 4).toString()); // for Group 
  			jComboBox5.setSelectedItem(jTable1.getValueAt(i, 7).toString()); // Type
  			int a = ((Integer) jTable1.getValueAt(i, 5)).intValue();
  			int auto = new Integer(a).intValue();
  			if(auto == 0) {
  				jCheckBox1.setSelected(false);
  			} else {
  				jCheckBox1.setSelected(true);
  			}
  			}
  		}

      });
      jLabel6.setText("TYPE");

      jComboBox5.setModel(types);

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
          jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel3Layout.createSequentialGroup()
              .addGap(24, 24, 24)
              .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addGroup(jPanel3Layout.createSequentialGroup()
                      .addComponent(jCheckBox1)
                      .addGap(18, 18, 18)
                      .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                      .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                      .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addGap(18, 18, 18)
                      .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGroup(jPanel3Layout.createSequentialGroup()
                      .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                      .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
              .addContainerGap(33, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
          jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel3Layout.createSequentialGroup()
              .addContainerGap()
              .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                      .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
              .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jCheckBox1)
                  .addComponent(jLabel4)
                  .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jButton1)
                  .addComponent(jLabel5)
                  .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel6)
                  .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addContainerGap(29, Short.MAX_VALUE))
      );

      jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jComboBox1, jComboBox2, jComboBox3, jComboBox4, jComboBox5, jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jTextField1});

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton2.setText("NEW");

        jButton3.setText("SAVE AS NEW");

        jButton4.setText("SAVE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	int i=jTable1.getSelectedRow();
      			if(i >= 0 ) {
      				
      				
      				WFConfig config = new WFConfig();
      				config.setId(new Integer(jTable1.getValueAt(i, 0).toString()).intValue());
                    config.setProductType(_productName.toString());     // this will get Tree node selected  as product
                    config.setProductSubType(_productSubName.toString());  // this will get Tree node selected  as productSubType
                    		if( jCheckBox1.isSelected())
                    				config.setAuto(1);
                    		else 
                    			config.setAuto(0);
                    		if(jComboBox1.getSelectedItem() == null) {
                    				commonUTIL.showAlertMessage("Select Orginal Status on Transition");
                    				return;
                    		}
                    		config.setCurrentStatus(jComboBox1.getSelectedItem().toString()); // for org status
                    		if(jComboBox2.getSelectedItem() == null) {
                    			commonUTIL.showAlertMessage("Select Action on Transition");
                    			return;
                    		}
                    		config.setAction(jComboBox2.getSelectedItem().toString()); // for action
                    		if(jComboBox3.getSelectedItem() == null) {
                    			commonUTIL.showAlertMessage("Select new status on Transition");
                    			return;
                    		}
                    		config.setOrgStatus(jComboBox3.getSelectedItem().toString());  // for new status
                    		config.setRule(jTextField1.getText());  // for rule 
                    		config.setLe(0);
                    		config.setUsers(0);
                    		if(jComboBox5.getSelectedItem() == null) {
                    			commonUTIL.showAlertMessage("Select Type of Transition");
                    			return;
                    		}
                    	
                    		config.setType(jComboBox5.getSelectedItem().toString());
                    		try {
                    			if(!checkAllTableValues(i)) {
                    				JOptionPane.showMessageDialog(null,"Transition Already Exists ",null,
                      				JOptionPane.INFORMATION_MESSAGE);
                    				return;
                    			} if(!checkReverTableValues())  {
                    					commonUTIL.showAlertMessage("Reverse Transition not Allowed");
                    					return;
                    			}
                    	else {
                    		if(config.getAuto() == 1 && (config.getCurrentStatus().equalsIgnoreCase(config.getOrgStatus()))) {
                    			commonUTIL.showAlertMessage("STP not allowed on same Transitions with old and new status");
                    			return;
                    		}
                    		remoteBORef.updateWFconfig(config);
    					if(i == -1)  {
    						commonUTIL.showAlertMessage("Reverse Transition not allowed ");
    						return;
    					}
    					config.setId(i);
    					model.udpateValueAt(config, jTable1.getSelectedRow(),  jTable1.getSelectedColumn());
                    	}
      	  
				
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				commonUTIL.displayError("WorkFlowSetupWindown", "UpdateMehtod", e);
			}
      	  			}
            }
        });
        jButton5.setText("DELETE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	int i=jTable1.getSelectedRow();
      			if(i >= 0 ) {
            	int r = ((Integer) jTable1.getValueAt(jTable1.getSelectedRow(), 0)).intValue();
            	WFConfig config = new WFConfig();
            	config.setId(r);
            	try {
					if(remoteBORef.removeWF(config)) {
						model.delRow(jTable1.getSelectedRow());
						//tmodel.removeRow(jTable1.getSelectedRow());
						//jTable1.setModel(tmodel);
					}
					
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
      			}
            }
        });
        // save as new record to be save 
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WFConfig config = new WFConfig();
                config.setProductType(_productName.toString());     // this will get Tree node selected  as product
                config.setProductSubType(_productSubName.toString());  // this will get Tree node selected  as productSubType
               if( jCheckBox1.isSelected())
                config.setAuto(1);
               else 
            	   config.setAuto(0);
               if(jComboBox1.getSelectedItem() == null) {
               	commonUTIL.showAlertMessage("Select Orginal Status on Transition");
               	return;
               }
                config.setCurrentStatus(jComboBox1.getSelectedItem().toString()); // for org status
                if(jComboBox2.getSelectedItem() == null) {
                   	commonUTIL.showAlertMessage("Select Action on Transition");
                   	return;
                   }
                config.setAction(jComboBox2.getSelectedItem().toString()); // for action
                if(jComboBox3.getSelectedItem() == null) {
                   	commonUTIL.showAlertMessage("Select new status on Transition");
                   	return;
                   }
                config.setOrgStatus(jComboBox3.getSelectedItem().toString());  // for new status
                config.setRule(jTextField1.getText());  // for rule 
                config.setLe(0);
                config.setUsers(0);
                if(jComboBox5.getSelectedItem() == null) {
                	commonUTIL.showAlertMessage("Select Type of Transition");
                	return;
                }
                	
                config.setType(jComboBox5.getSelectedItem().toString());
                try {
                	if(!checkAllTableValues()) {
                		JOptionPane.showMessageDialog(null,"Transition Already Exists ",null,
                  				JOptionPane.INFORMATION_MESSAGE);
                		return;
                	} if(!checkReverTableValues())  {
                		commonUTIL.showAlertMessage("Reverse Transition not Allowed");
                		return;
                	}
                	else {
                		if(config.getAuto() == 1 && (config.getCurrentStatus().equalsIgnoreCase(config.getOrgStatus()))) {
                			commonUTIL.showAlertMessage("STP not allowed on same Transitions with old and new status");
                			return;
                		}
					int i = remoteBORef.saveWF(config);
					if(i == -1)  {
						commonUTIL.showAlertMessage("Reverse Transition not allowed ");
						return;
					}
					config.setId(i);
					model.addRow(config);
				//	filltable(config,tmodel.getRowCount());
                	}
					
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                
            }

			
        });
        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1019, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton2, jButton3, jButton4, jButton5});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton5))
                .addGap(31, 31, 31))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton2, jButton3, jButton4, jButton5});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1980, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1626, 1626, 1626))
        );

       // pack();
    }// </editor-fold>

private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}

private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorkFlowSetupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorkFlowSetupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorkFlowSetupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorkFlowSetupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WorkFlowSetupWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox jComboBox5;
    // End of variables declaration
    
    
    private void buildTree() {
		 Vector v = new Vector();
		 Vector wfType = new Vector();
		// StartUPData data1 = new StartUPData();
	     //  data1.setName("ProductType");
		 DefaultMutableTreeNode type = null;
		 try {
			v = (Vector) remoteBORef.getStartUPData("ProductType");
			wfType = (Vector) remoteBORef.getStartUPData("WFType");
		   // v = util.SortShell.sort(v,ComparatorFactory.getNonSenseStringComparator());

		   root =
		        new DefaultMutableTreeNode("ProductName");
		   for(int t=0;t<wfType.size();t++) {
			    StartUPData datatype = (StartUPData)wfType.elementAt(t);
		        String domainType = datatype.getName();
		        type = new DefaultMutableTreeNode(domainType);
		        root.add(type);
		    for (int i=0; i<v.size(); i++) {
		    	StartUPData data = (StartUPData)v.elementAt(i);
		        String domain = data.getName();
		        parent = new DefaultMutableTreeNode(domain);
		        leaf = new   DefaultMutableTreeNode("ALL");
		        type.add(parent);
		        parent.add(leaf);
		        Vector values = (Vector) remoteBORef.getStartUPData(domain+".subType");
		            if (values == null)continue;
		        for(int j=0;j<values.size();j++) {
		        	
		        leaf = new DefaultMutableTreeNode(((StartUPData)values.elementAt(j)).getName());
		        parent.add(leaf);
		        }
		    } 
		   }
		    _root = root;
		    _treeModel = new DefaultTreeModel(root);
		    jTree1.setModel(_treeModel);
		
		    
		 } catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    }
		
   private void getDataOnComboBox( javax.swing.DefaultComboBoxModel combodata,String name) {
		Vector vector;
		try {
			vector = (Vector) remoteBORef.getStartUPData(name);
			if(vector.size() > 0) {
			Iterator it = vector.iterator();
	    	int i =0;
	    	while(it.hasNext()) {
	    		
	    		StartUPData data = (StartUPData) it.next();
	    	
   		
   			
   		combodata.insertElementAt(data.getName(), i);
   		i++;
   	}	
			}
		}catch (RemoteException e) {
   				// TODO Auto-generated catch block
   				e.printStackTrace();
   			}
   	
   	
   }
   
   public void selectProductWF(String productType,String productSubType,String type) {
		 
		 try {
			 String sql = " productType = '" + productType + "' and productSubType = '" + productSubType + "' and type ='"+type+"'";
			 Vector v1 = null;
			v1  = (Vector) selectTransitions.get(sql);
			 if(v1 == null)
				v1  = (Vector) remoteBORef.selectWFWhere(sql);
			 
			 if(v1 == null) {
				 	 return; 
			 } else {
				 selectTransitions.put(sql,v1);
				 		 
				 	 }
			 data = v1;
			 model = new TableModelUtil(v1, col, remoteBORef);
			 jTable1.setModel(model);
			/* Iterator it = v1.iterator();;
		    	int i =0;
		    
	    	while(it.hasNext()) {
             WFConfig config = (WFConfig) it.next();
			tmodel.insertRow(i, new Object[]{config.getId(),config.getCurrentStatus(),config.getAction(),config.getOrgStatus(),"GROUP1",config.getAuto(),config.getRule(),config.getType()});
	    	}
	    	repaint(); */
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 
	 }
  
   public void filltable(WFConfig config,int i) {
		 
		 model.addRow(config);
			//tmodel.insertRow(i, new Object[]{config.getId(),config.getCurrentStatus(),config.getAction(),config.getOrgStatus(),"GROUP1",config.getAuto(),config.getRule(),config.getType()});
		
		 
	 }
   
   
  
   
   public boolean checkAllTableValues() {
	   boolean flag = true;
	   for(int i=0;i<jTable1.getModel().getRowCount();i++) {
		   String orgstatus =  (String) jTable1.getValueAt(i, 1);
		   String action =  (String) jTable1.getValueAt(i, 2);
		   String newstatus =  (String) jTable1.getValueAt(i, 3);
		   String newType = (String) jTable1.getValueAt(i, 7);
		   if(checkValidation(jComboBox1,orgstatus) && checkValidation(jComboBox2,action) && checkValidation(jComboBox3,newstatus) && checkValidation(jComboBox5,newType) )
			flag = false;
		   
	   }
	   return flag;
	   
   }
   public boolean checkAllTableValues(int avoidRow) {
	   boolean flag = true;
	   for(int i=0;i<jTable1.getModel().getRowCount();i++) {
		   if(i != avoidRow) {
		   String orgstatus =  (String) jTable1.getValueAt(i, 1);
		   String action =  (String) jTable1.getValueAt(i, 2);
		   String newstatus =  (String) jTable1.getValueAt(i, 3);
		   String newType = (String) jTable1.getValueAt(i, 7);
		   if(checkValidation(jComboBox1,orgstatus) && checkValidation(jComboBox2,action) && checkValidation(jComboBox3,newstatus) && checkValidation(jComboBox5,newType) )
			flag = false;
		   }
		   
	   }
	   return flag;
   }
   
   public boolean checkReverTableValues() {
	   boolean flag = true;
	   for(int i=0;i<jTable1.getModel().getRowCount();i++) {
		   String orgstatus =  (String) jTable1.getValueAt(i, 1);
		   String action =  (String) jTable1.getValueAt(i, 2);
		   String newstatus =  (String) jTable1.getValueAt(i, 3);
		   String newType = (String) jTable1.getValueAt(i, 7);
		   if(!orgstatus.equalsIgnoreCase(newstatus))
		   if(checkValidation(jComboBox3,orgstatus)  && checkValidation(jComboBox1,newstatus)  )
			flag = false;
		   
	   }
	   return flag;
   }
   
   // check for duplicate for transition. 
   public boolean checkValidation(JComboBox combo,String selectValue) {
	   if(combo.getSelectedItem().toString().equalsIgnoreCase(selectValue)) 
		   return true;
	   else 
		   return false;
   }
   

   class TableModelUtil extends AbstractTableModel {   
       
   	 final String[] columnNames;  
   	    
   	 Vector<WFConfig> data;   
   	 RemoteReferenceData remoteRef ;
   	        
   	 public TableModelUtil( Vector<WFConfig> myData,String col [],RemoteReferenceData remoteRef ) {   
   	 	this.columnNames = col;
   	this.data = myData;   
   	this.remoteRef = remoteRef;
   	}   

   	    
   	 public int getColumnCount() {   
   	     return columnNames.length;   
   	 }   
   	    
   	 public int getRowCount() {   
   		 if(data != null)
   	     return data.size();   
   		 return 0;
   	 }   
   	 public String getColumnName(int col) {   
   	     return columnNames[col];   
   	 }   
   	 public Object getValueAt(int row, int col) {   
   	     Object value = null;  	 
   	 
   	  WFConfig wfconfig = (WFConfig) data.get(row);
   	    
   		 switch (col) {
   	     case 0:
   	         value = wfconfig.getId();
   	         break;
   	     case 1:
   	         value =wfconfig.getCurrentStatus();
   	         break;
   	     case 2:
   	    	
   	         value =  wfconfig.getAction();
   	         break;
   	     case 3:
   	         value =wfconfig.getOrgStatus();
   	         break;
   	     case 4:
   	         value = "GROUP1";
   	         break;
   	     case 5:
   	         value =wfconfig.getAuto();
   	         break;
   	     case 6:
   	         value = wfconfig.getRule();
   	         break;
   	     case 7:
   	         value =wfconfig.getType();
   	         break;
   		 }
   	     return value;
   	 }   
   	   
   	 public boolean isCellEditable(int row, int col) {   
   	 return false;   
   	 }   
   	 public void setValueAt(Object value, int row, int col) {   
   	         System.out.println("Setting value at " + row + "," + col   
   	                            + " to " + value   
   	                            + " (an instance of "    
   	                            + value.getClass() + ")");  
   	         if(value instanceof Folder) {
   	     data.set(row,(WFConfig) value) ;
   	     this.fireTableDataChanged();   
   	         System.out.println("New value of data:");   
   	         }
   	        
   	 }   
   	    
   	 public void addRow(Object value) {   
   	    
   		 data.add((WFConfig) value) ;
   	 this.fireTableDataChanged();   
   	   
   	 }   
   	    
   	 public void delRow(int row) {   
   	    if(row != -1) {
   	 data.remove(row);          
   	 this.fireTableDataChanged();   
   	    }
   	    
   	 }   
   	 
   	 public void udpateValueAt(Object value, int row, int col) {   
   	     
   	  
   	     data.set(row,(WFConfig) value) ;
   	 fireTableCellUpdated(row, col);   
   	    
   	}   
   	    
   	    private LegalEntity getLeName(int leID) {
   	    	LegalEntity le = null;
   	    	try {
   				le = remoteRef.selectLE(leID);
   			} catch (RemoteException e) {
   				// TODO Auto-generated catch block
   				e.printStackTrace();
   			}
   	    	return le;
   	    }
   	    
   	    public void removeALL() {
   	    	if(data != null) {
   	  	  data.removeAllElements();
   	    	} 
   	    data = null;
   	  	 this.fireTableDataChanged();  
   	    }
   }
}
