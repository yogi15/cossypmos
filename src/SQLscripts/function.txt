
**********   UPDATED BY SARISH on 08 FEB 2015   ************************************************************************************
************ FTD SQL ****************************************************************
select 
	 (case  when substr(tradedesc,5,7) = 'INR' then 'FCY/INR'    else 'FCY/FCY'    end )  FCY_NONFCY, 
	 (case  when currency = 'INR' then 'INR'    else 'USD'    end )  Currency, 
	(case  when substr(type,0,3) = 'BUY' then 'PURCHASE'   else 'SALE'    end ) BUYSELL,
 (
	  nvl(sum( decode(getFTDReportColumnIdentifier(getFXForwardOptionType(id,'InstrumentType'),getValueOnLEAttribute(cpid,'Sector'),getSPOTTtypeDeals(tradedate,deliverydate,tradedesc1),tradedesc1),'MERCHANTREADY',abs(decode(checkOnBaseAndQuotingCurr(tradedesc),0,amount1,amount2)) * decode(checkCurrencyPairWithoutUSD(tradedesc),1,1,getQuoteData(substr(tradedesc,1,3) || '/USD','15/01/2015')))),0)
 ) AS "MERCHANT READY",
 (
 nvl(sum( decode(getFTDReportColumnIdentifier(getFXForwardOptionType(id,'InstrumentType'),getValueOnLEAttribute(cpid,'Sector'),getSPOTTtypeDeals(tradedate,deliverydate,tradedesc1),tradedesc1),'MERCHANTFORWARD',abs(decode(checkOnBaseAndQuotingCurr(tradedesc),0,amount1,amount2)) * decode(checkCurrencyPairWithoutUSD(tradedesc),1,1,getQuoteData(substr(tradedesc,1,3) || '/USD','15/01/2015')))),0) 
 ) AS "MERCHANT FORWARD",
 nvl(sum( decode(getFTDReportColumnIdentifier(getFXForwardOptionType(id,'TakeUpType'),getValueOnLEAttribute(cpid,'Sector'),getSPOTTtypeDeals(tradedate,deliverydate,tradedesc1),tradedesc1),'MERCHANTCANCELLED',abs(decode(checkOnBaseAndQuotingCurr(tradedesc),0,amount1,amount2)) * decode(checkCurrencyPairWithoutUSD(tradedesc),1,1,getQuoteData(substr(tradedesc,1,3) || '/USD','15/01/2015')))),0) 
   AS "MERCHANT CANCELLATION",
 (
	 nvl(sum( decode(getFTDReportColumnIdentifier(getFXForwardOptionType(id,'InstrumentType'),getValueOnLEAttribute(cpid,'Sector'),getSPOTTtypeDeals(tradedate,deliverydate,tradedesc1),tradedesc1),'FXSPOT',abs(decode(checkOnBaseAndQuotingCurr(tradedesc),0,amount1,amount2)) * decode(checkCurrencyPairWithoutUSD(tradedesc),1,1,getQuoteData(substr(tradedesc,1,3) || '/USD','15/01/2015')))),0) 
 ) AS "FX SPOT",
 (
 	nvl(sum( decode(getFTDReportColumnIdentifier(getFXForwardOptionType(id,'InstrumentType'),getValueOnLEAttribute(cpid,'Sector'),getSPOTTtypeDeals(tradedate,deliverydate,tradedesc1),tradedesc1),'FXFORWARD',abs(decode(checkOnBaseAndQuotingCurr(tradedesc),0,amount1,amount2)) * decode(checkCurrencyPairWithoutUSD(tradedesc),1,1,getQuoteData(substr(tradedesc,1,3) || '/USD','15/01/2015')))),0) 
 ) AS "FX FORWARD",
 ( 
nvl(sum(decode(getFTDReportColumnIdentifier(getFXForwardOptionType(id,'InstrumentType'),getValueOnLEAttribute(cpid,'Sector'),getSPOTTtypeDeals(tradedate,deliverydate,tradedesc1),tradedesc1),'FXSWAP',abs(decode(checkOnBaseAndQuotingCurr(tradedesc),0,amount1,amount2)) * decode(checkCurrencyPairWithoutUSD(tradedesc),1,1,getQuoteData(substr(tradedesc,1,3) || '/USD','15/01/2015')))),0) 
 ) AS "FX SWAP"
FROM  
		trade  where    trunc(tradedate) = to_date('15/01/2015','dd/mm/yyyy')      and autotype in ('Original','null')
GROUP BY 
		(case  when substr(type,0,3) = 'BUY' then 'PURCHASE'   else 'SALE'    end ),
	    (case  when substr(tradedesc,5,7) = 'INR' then 'FCY/INR'  else 'FCY/FCY' end ), 
	    (case  when currency = 'INR' then 'INR'   else 'USD'    end ) ,
	    getValueOnLEAttribute(cpid,'Sector')
ORDER BY
	   (case when substr(tradedesc,5,7) = 'INR' then 'FCY/INR'  else 'FCY/FCY'   end ), 
	   (case  when currency = 'INR' then 'INR'  else 'USD'  end )




**********************************************************************************************
CREATE OR REPLACE Function getFXForwardOptionType
   ( tradeid IN number,tradeattributename in varchar2) 

   RETURN varchar2
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT attributeValue 
     FROM  attribute where id = tradeID and attributename = tradeattributename and type = 'Trade';

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 1;
   end if;

   CLOSE c1;

RETURN cnumber;

END;

************************************************************************
CREATE OR REPLACE Function getFXForwardOptionType
   ( tradeid IN number,tradeattributename in varchar2) 

   RETURN varchar2
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT trim(attributeValue )
     FROM  attribute where id = tradeid and attributename = tradeattributename and type = 'Trade';

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 1;
   end if;

   CLOSE c1;

RETURN cnumber;

END;







**********   UPDATED BY SARISH on 08 FEB 2015   ************************************************************************************
CREATE OR REPLACE Function getFTDReportColumnIdentifier
   (instrumentType in varchar2,bookattributename in varchar2,dateDif in number,productType in varchar2) 

   RETURN varchar2
IS
   cnumber varchar2(50);

   

BEGIN
   
    IF  instrumentType = 'FXPUR-Fx Purchase' and bookattributename = 'BANK' and dateDif = 1 and productType = 'FXFORWARD' then 
	cnumber := 'FXSPOT';
     end if;
    IF  instrumentType = 'FXSEL-Fx Sell' and bookattributename = 'BANK' and dateDif = 1 and productType = 'FXFORWARD' then 
	cnumber := 'FXSPOT';
     end if;
     IF  instrumentType = 'FXSEL-Fx Sell' and bookattributename = 'BANK' and dateDif = 2 and productType = 'FXFORWARD' then 
	cnumber := 'FXFORWARD';
     end if;
      IF  instrumentType = 'FXPUR-Fx Purchase' and bookattributename = 'BANK' and dateDif = 2 and productType = 'FXFORWARD' then 
	cnumber := 'FXFORWARD';
	end if;
      IF  instrumentType = 'Buy_Sell' and bookattributename = 'BANK' and dateDif = 2 and productType = 'FXSWAP' then 
	cnumber := 'FXSWAP';
      end if;
     IF  instrumentType = 'Sell_Buy' and bookattributename = 'BANK' and dateDif = 2 and productType = 'FXSWAP' then 
	cnumber := 'FXSWAP';
      end if;
      IF  instrumentType = 'MerchantReady' and bookattributename = 'CORP' and dateDif = 1 and productType = 'FXFORWARD' then 
	cnumber := 'MERCHANTREADY';
      end if;
	  IF  instrumentType = 'FCCHQ Purchased' and bookattributename = 'CORP' and dateDif = 1 and productType = 'FXFORWARD' then 
	cnumber := 'MERCHANTREADY';
      end if;
	  IF  instrumentType = 'Ready Purchase' and bookattributename = 'CORP' and dateDif = 1 and productType = 'FXFORWARD' then 
	cnumber := 'MERCHANTREADY';
      end if;
	  IF  instrumentType = 'Ready Sell' and bookattributename = 'CORP' and dateDif = 1 and productType = 'FXFORWARD' then 
	cnumber := 'MERCHANTREADY';
      end if;
	  IF  instrumentType = 'FWD_SALE' and bookattributename = 'CORP' and dateDif = 2 and productType = 'FXFORWARDOPTION' then 
	cnumber := 'MERCHANTFORWARD';
      end if;
	  IF  instrumentType = 'FWD_PURCHASE' and bookattributename = 'CORP' and dateDif = 2 and productType = 'FXFORWARDOPTION' then 
	cnumber := 'MERCHANTFORWARD';
      end if;
	  IF  instrumentType = 'Bill Discounted' and bookattributename = 'CORP' and dateDif = 2 and productType = 'FXFORWARDOPTION' then 
	cnumber := 'MERCHANTFORWARD';
      end if;
	  IF  instrumentType = 'Bill Purchased' and bookattributename = 'CORP' and dateDif = 2 and productType = 'FXFORWARDOPTION' then 
	cnumber := 'MERCHANTFORWARD';
      end if;
	  IF  instrumentType = 'MerchantForward' and bookattributename = 'CORP' and dateDif = 2 and productType = 'FXFORWARDOPTION' then 
	cnumber := 'MERCHANTFORWARD';
      end if;
       IF  instrumentType = 'Cancelled' and bookattributename = 'CORP' and dateDif = 2 and productType = 'FXTAKEUP' then 
	cnumber := 'MERCHANTCANCELLED';
      end if;
	  IF  instrumentType = 'Cancelled' and bookattributename = 'CORP' and dateDif = 1 and productType = 'FXTAKEUP' then 
	cnumber := 'MERCHANTCANCELLED';
      end if;
      
RETURN cnumber;

END;


************************************************************************




**********************************************************************************************
CREATE OR REPLACE Function getValueOnLEAttribute
   ( leid IN number,leattributename in varchar2) 

   RETURN varchar2
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT attributeValue
     FROM  leattribute where le_ID = leid and attributename = leattributename;

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 1;
   end if;

   CLOSE c1;

RETURN cnumber;

END;

************************************************************************
CREATE OR REPLACE Function checkOnBaseAndQuotingCurr
   ( name_in IN varchar2) 
return number
is 
currencyPair varchar2(20);
flag number(10);
begin

currencyPair := 0;

IF SUBSTR(name_in , 1,3) = 'USD' then 
  currencyPair := 0;
end if;
if SUBSTR(name_in , 5,7) = 'USD' then 
currencyPair := 1;
end if; 
return currencyPair;
ENd;

***************************************************************************
CREATE OR REPLACE Function checkCurrencyPairWithoutUSD
   ( name_in IN varchar2) 
return number
is 
currencyPair varchar2(20);
flag number(10);
begin

currencyPair := 0;

IF SUBSTR(name_in , 1,3) = 'USD' then 
  currencyPair := 1;
end if;
if SUBSTR(name_in , 5,7) = 'USD' then 
currencyPair := 1;
end if; 
return currencyPair;
ENd;
**************************************************************************

create or replace Function getQuoteData
   ( name_in IN varchar2 , quotedate in varchar2)
   RETURN number
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT to_number(close)
     FROM quotedata
     WHERE quotename  = name_in and to_char(to_date(DATETIME, 'dd/MON/yyyy HH24:MI:SS'), 'dd/mm/yyyy') = quotedate;

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 1;
   end if;

   CLOSE c1;

RETURN cnumber;

END;

********************************************************************

**************************************************************************

create or replace Function getRealisedOnFirstLeg
   ( name_in IN number)
   RETURN number
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
   
    select sum(quantity) from trade t ,attribute a where t.id = a.id and a.type = 'Trade' 
and a.attributename = 'TakeUpType' and a.attributevalue = 'Utilized' and t.parentid = name_in and t.tradedesc1 = 'FXTAKEUP' 
group by t.parentid;

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 0;
   end if;

   CLOSE c1;

RETURN cnumber;

END;

********************************************************************
**************************************************************************

create or replace Function getOutStandingOnFirstLeg
   ( name_in IN number)
   RETURN number
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT (amount1 - getRealisedOnFirstLeg(name_in)) outstandingFirstLeg
     FROM trade
    where id =  name_in and tradedesc1 = 'FXFORWARDOPTION';

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 0;
   end if;

   CLOSE c1;

RETURN cnumber;

END;

**************************************************************************

create or replace Function getRealisedOnSecondLeg
   ( name_in IN number)
   RETURN number
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
    
     select sum(nominal)*-1 from trade t ,attribute a where t.id = a.id and a.type = 'Trade' 
and a.attributename = 'TakeUpType' and a.attributevalue = 'Utilized' and t.parentid = name_in and t.tradedesc1 = 'FXTAKEUP' 
group by t.parentid;

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 0;
   end if;

   CLOSE c1;

RETURN cnumber;

END;


create or replace Function getCancelledTakeupOnSecondLeg
   ( name_in IN number)
   RETURN number
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
    
     select sum(nominal)*-1 from trade t ,attribute a where t.id = a.id and a.type = 'Trade' 
and a.attributename = 'TakeUpType' and a.attributevalue = 'Cancelled' and t.parentid = name_in and t.tradedesc1 = 'FXTAKEUP' 
group by t.parentid;

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 0;
   end if;

   CLOSE c1;

RETURN cnumber;

END;



create or replace Function getCancelledTakeupOnFirstLeg
   ( name_in IN number)
   RETURN number
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
    
     select sum(quantity) from trade t ,attribute a where t.id = a.id and a.type = 'Trade' 
and a.attributename = 'TakeUpType' and a.attributevalue = 'Cancelled' and t.parentid = name_in and t.tradedesc1 = 'FXTAKEUP' 
group by t.parentid;

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 0;
   end if;

   CLOSE c1;

RETURN cnumber;

END;



create or replace Function getOutStandingOnSecondLeg
   ( name_in IN number)
   RETURN number
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT ((amount2 *-1)- getRealisedOnSecondLeg(name_in)) outstandingSecondtLeg
     FROM trade
    where id =  name_in and tradedesc1 = 'FXFORWARDOPTION';

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 0;
   end if;

   CLOSE c1;

RETURN cnumber;

END;

********************************************************************

Function getSplitRates
   ( tradeID IN number , attributen in varchar2)
   RETURN varchar2
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT attributeValue
     FROM  attribute where id = tradeID and attributename =  attributen and type = 'Trade';

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := 1;
   end if;

   CLOSE c1;

RETURN cnumber;

END;


create or replace Function getAttributeValueOnTrade
   ( tradeID IN number , attributen in varchar2)
   RETURN varchar2
IS
   cnumber varchar2(20);

   CURSOR c1
   IS
     SELECT attributeValue
     FROM  attribute where id = tradeID and attributename =  attributen and type = 'Trade';

BEGIN

   OPEN c1;
   FETCH c1 INTO cnumber;

   if c1%notfound then
      cnumber := '';
   end if;

   CLOSE c1;

RETURN cnumber;

END;

*********************************************************************

create or replace Function getINREquivaluent
   ( amount1 number ,amount2 number , currencyPair in varchar2, tradeID IN number,attributeName varchar2)
   RETURN number
IS
   cnumber number(30,20);
   currenyP varchar2(20);
  

BEGIN

  cnumber := 0;
 IF SUBSTR(currencyPair , 5,7) = 'INR' then 
 cnumber := amount2;
end if;
if SUBSTR(currencyPair , 5,7) <> 'INR' then 
 cnumber := amount1 * getSplitRates(tradeID,attributeName);

end if; 

  
  

RETURN cnumber;

END;


*********************************************************************

create or replace function getSPOTTtypeDeals(tradedate in timestamp,deliverdate in timestamp,
producttype in varchar2) return number
is
cnumber number(10);
begin
cnumber := trunc(deliverdate) - trunc(tradedate);
 if(cnumber >= 2) Then
     cnumber := 2;
   else
      cnumber := 1;
end if;

if(producttype <> 'FXFORWARD') Then
cnumber := 2;
end if ;

  RETURN cnumber;


EXCEPTION
WHEN OTHERS THEN
   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


*******************************************************************************